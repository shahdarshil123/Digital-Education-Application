/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.workArea.Student;

import Business.Business;
import Business.Course.Course;
import Business.Course.ProfessorCourses;
import Business.Course.ProfessorCoursesDirectory;
import Business.Course.StudentBrowseCourses;
import Business.Course.StudentBrowseCoursesDirectory;
import Business.Course.StudentCourseDirectory;
import Business.Course.StudentCourseStatus;
import Business.Course.StudentCourses;
import Business.Profiles.ProfessorProfile;
import Business.UserAccounts.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anusreemohanan
 */
public class StudentRegisteredCoursesJPanel extends javax.swing.JPanel {

    /*
     * Creates new form StudentRegisteredCourses
     */
    JPanel workAreaPanel;
    UserAccount userAccount;
    Business business;
    //ProfessorCoursesDirectory profCoursesList;
    StudentBrowseCoursesDirectory studentBrowseCourseList;
    StudentCourseDirectory studentCoursesList;
    public StudentRegisteredCoursesJPanel(JPanel workAreaPanel, UserAccount userAccount, Business business) {
        initComponents();
        this.workAreaPanel = workAreaPanel;
        this.userAccount = userAccount;
        this.business = business;
        //this.profCoursesList = business.getProfCoursesList();
        this.studentBrowseCourseList = business.getStudentBrowseCoursesList();
        this.studentCoursesList = business.getStudentCoursesList();
        populateBrowseTable();
        //populateRegisterCoursesTable();
        populateRegisterCoursesTable();
        //populateSearchComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBrowseCourses = new javax.swing.JTable();
        lblMyCourses = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRegisteredCourses = new javax.swing.JTable();
        btnViewCourseDetails = new javax.swing.JButton();
        cbFilter = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        lblBrowseCourses = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        txtSearchBar = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(51, 153, 255));

        tblBrowseCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Professor Name", "Specialization", "Region", "Language"
            }
        ));
        jScrollPane1.setViewportView(tblBrowseCourses);

        lblMyCourses.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblMyCourses.setForeground(new java.awt.Color(255, 255, 255));
        lblMyCourses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMyCourses.setText("My Courses");

        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblRegisteredCourses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Professor Name", "Topic", "Region", "Language"
            }
        ));
        jScrollPane2.setViewportView(tblRegisteredCourses);

        btnViewCourseDetails.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnViewCourseDetails.setText("View Course Details");
        btnViewCourseDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCourseDetailsActionPerformed(evt);
            }
        });

        cbFilter.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        cbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Professor Name", "Course Name", "Region", "Language" }));
        cbFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbFilterMouseClicked(evt);
            }
        });
        cbFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblBrowseCourses.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblBrowseCourses.setForeground(new java.awt.Color(255, 255, 255));
        lblBrowseCourses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBrowseCourses.setText("Browse Courses");

        btnAdd.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtSearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBarActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnReset.setText("Reset Search");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMyCourses, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(85, 85, 85)
                                .addComponent(btnRemove)
                                .addGap(138, 138, 138))
                            .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(118, 118, 118)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(165, 165, 165)
                                .addComponent(lblBrowseCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(btnViewCourseDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(348, 348, 348)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lblBrowseCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnRemove)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(cbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch)
                            .addComponent(btnReset))))
                .addGap(18, 18, 18)
                .addComponent(btnViewCourseDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(lblMyCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workAreaPanel.remove(this);
        CardLayout layout = (CardLayout)workAreaPanel.getLayout();
        layout.previous(workAreaPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewCourseDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCourseDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblBrowseCourses.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select course from Course Catalog to add");
            return;
        }
        DefaultTableModel tableModel = (DefaultTableModel) tblBrowseCourses.getModel();
        StudentBrowseCourses studentBrowseCourses = (StudentBrowseCourses)tableModel.getValueAt(selectedRowIndex,0);
        
        StudentViewNewCourseJPanel studentViewNewCourseJPanel = new StudentViewNewCourseJPanel(workAreaPanel,userAccount,studentBrowseCourses);
        workAreaPanel.add("StudentViewNewCourseJPanel",studentViewNewCourseJPanel);
        CardLayout layout = (CardLayout) workAreaPanel.getLayout();
        layout.next(workAreaPanel);
    }//GEN-LAST:event_btnViewCourseDetailsActionPerformed

    private void cbFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilterActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_cbFilterActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(txtSearchBar.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null,"Please select value from list to search");
            return;
        }
        String text = txtSearchBar.getSelectedItem().toString();
        String filter = cbFilter.getSelectedItem().toString();
        //System.out.println(text);
       DefaultTableModel dtm = (DefaultTableModel) tblBrowseCourses.getModel();
       dtm.setRowCount(0);
       switch(filter){
           case("Professor Name"):
           {
           for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
           if(((studentBrowseCourses.getProfessor().getPerson().getPersonName()).equals(text)) && (studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester())){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }  
           }
           break;
           case("Course Name"):
           {
           for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            if((((studentBrowseCourses.getCourseSemester().getCourse().getCourseName()).equals(text)) && (studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester()))){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }   
           }
           break;
           case("Region"):
           {
           for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            if((((studentBrowseCourses.getProfessor().getRegion()).equals(text)) && (studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester()))){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }   
           }
           break;
             case("Language"):
           {
           for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            if((((studentBrowseCourses.getProfessor().getLanguage()).equals(text)) && (studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester()))){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }   
           }
           break;         
       }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblBrowseCourses.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(null,"Please select course from Course Catalog to add");
            return;
        }
        DefaultTableModel tableModel = (DefaultTableModel) tblBrowseCourses.getModel();
        StudentBrowseCourses studentBrowseCourses = (StudentBrowseCourses)tableModel.getValueAt(selectedRowIndex,0);
        //StudentStatusCourses studentStatusCourses = 
        studentCoursesList.findStudentCourses(userAccount.getStudentProfile()).addStudentCourseStatus(studentBrowseCourses);
        populateRegisterCoursesTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtSearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBarActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtSearchBarActionPerformed

    private void cbFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbFilterMouseClicked
        // TODO add your handling code here:
        String value = cbFilter.getSelectedItem().toString();
        if(value.equals("Professor Name")){
            populateSearchComboBoxProfessorName();
        }
        else if(value.equals("Course Name")){
            populateSearchComboBoxCourseName();
        }
        else if(value.equals("Region")){
            populateSearchComboBoxRegion();
        }
        else if(value.equals("Language")){
            populateSearchComboBoxLanguage();
        }
    }//GEN-LAST:event_cbFilterMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        populateBrowseTable();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"Student information saved.");
        return;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
                int selectedRowIndex = tblRegisteredCourses.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(null,"Please select course from Course Catalog to delete");
            return;
        }
        DefaultTableModel tableModel = (DefaultTableModel) tblRegisteredCourses.getModel();
        StudentBrowseCourses studentBrowseCourses = (StudentBrowseCourses)tableModel.getValueAt(selectedRowIndex,0);
        studentCoursesList.findStudentCourses(userAccount.getStudentProfile()).removeProfessorCourse(studentBrowseCourses);
        populateRegisterCoursesTable();
    }//GEN-LAST:event_btnRemoveActionPerformed
    
       
//       for(ProfessorCourses profCourses: profCoursesList.getProfCoursesList()){
//           for(Course course: profCourses.getProfCourseList()){
//              Object[] row = new Object[5];
//              row[0] = course;
//              row[1] = course.getCourseName();
//              row[2] = profCourses.getProfProfile().getPerson().getPersonName();
//              row[3] = "";
//              row[4] = "";
//              dtm.addRow(row);
//           }
//       }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnViewCourseDetails;
    private javax.swing.JComboBox<String> cbFilter;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBrowseCourses;
    private javax.swing.JLabel lblMyCourses;
    private javax.swing.JTable tblBrowseCourses;
    private javax.swing.JTable tblRegisteredCourses;
    private javax.swing.JComboBox<String> txtSearchBar;
    // End of variables declaration//GEN-END:variables

    public void populateBrowseTable(){
       DefaultTableModel dtm = (DefaultTableModel) tblBrowseCourses.getModel();
       dtm.setRowCount(0);
       for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
           if(studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester()){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }
    }
    
    private void populateRegisterCoursesTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblRegisteredCourses.getModel();
       dtm.setRowCount(0);
       for(StudentCourseStatus studentCourseStatus: studentCoursesList.findStudentCourses(userAccount.getStudentProfile()).getStudentCourses()){
           StudentBrowseCourses studentBrowseCourses = studentCourseStatus.getStudentBrowseCourses();
           if(studentBrowseCourses.getCourseSemester().getSemester() == business.getCurrentSemester()){
           Object[] row = new Object[6];
           row[0] = studentBrowseCourses;
           row[1] = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
           row[2] = studentBrowseCourses.getProfessor().getPerson().getPersonName();
           row[3] = studentBrowseCourses.getProfessor().getSpecialization();
           row[4] = studentBrowseCourses.getProfessor().getRegion();
           row[5] = studentBrowseCourses.getProfessor().getLanguage();
           dtm.addRow(row);
       }
       }
}

    public void populateSearchComboBoxProfessorName() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        ArrayList<String> professorList = new ArrayList<String>();
        for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            String professor = studentBrowseCourses.getProfessor().getPerson().getPersonName();
            professorList.add(professor);
        }
         Set<String> distinctProfessor = new HashSet<String>(professorList);
         for(String professor: distinctProfessor){
            model.addElement(professor);
        }
        txtSearchBar.setModel(model);
    }
    
    public void populateSearchComboBoxCourseName(){
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        ArrayList<String> CourseList = new ArrayList<String>();
        for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            String course = studentBrowseCourses.getCourseSemester().getCourse().getCourseName();
            CourseList.add(course);
        }
         Set<String> distinctCourse = new HashSet<String>(CourseList);
         for(String course: distinctCourse){
            model.addElement(course);
        }
        txtSearchBar.setModel(model);
    }
    
    public void populateSearchComboBoxRegion(){
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        ArrayList<String> RegionList = new ArrayList<String>();
        for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            String region = studentBrowseCourses.getProfessor().getRegion();
            RegionList.add(region);
        }
         Set<String> distinctRegion = new HashSet<String>(RegionList);
         for(String region: distinctRegion){
            model.addElement(region);
        }
        txtSearchBar.setModel(model);               
    }
    
    public void populateSearchComboBoxLanguage(){
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        ArrayList<String> LanguageList = new ArrayList<String>();
        for(StudentBrowseCourses studentBrowseCourses: studentBrowseCourseList.getStudentBrowseCoursesList()){
            String language = studentBrowseCourses.getProfessor().getLanguage();
            LanguageList.add(language);
        }
         Set<String> distinctLanguage = new HashSet<String>(LanguageList);
         for(String language: distinctLanguage){
            model.addElement(language);
        }
        txtSearchBar.setModel(model);               
    }    
    
}
